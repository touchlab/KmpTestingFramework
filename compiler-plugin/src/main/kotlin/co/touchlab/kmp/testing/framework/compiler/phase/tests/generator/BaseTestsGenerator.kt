package co.touchlab.kmp.testing.framework.compiler.phase.tests.generator

import co.touchlab.kmp.testing.framework.compiler.phase.tests.descriptor.ContractDescriptor
import co.touchlab.kmp.testing.framework.compiler.phase.tests.descriptor.TestsSuiteInstanceDescriptor
import co.touchlab.kmp.testing.framework.compiler.util.SmartStringBuilder
import java.nio.file.Files
import kotlin.io.path.writeText

abstract class BaseTestsGenerator : TestsGenerator {

    override fun generate(testsSuiteInstanceDescriptor: TestsSuiteInstanceDescriptor) {
        val outputFile = testsSuiteInstanceDescriptor.configuration.outputDirectoryPath
            .resolve(testsSuiteInstanceDescriptor.generatedFileName)

        val fileContent = SmartStringBuilder {
            testsSuiteInstanceDescriptor.appendCode()
        }

        Files.createDirectories(outputFile.parent)

        outputFile.writeText(fileContent)
    }

    context(SmartStringBuilder)
    private fun TestsSuiteInstanceDescriptor.appendCode() {
        appendGeneratedWarning()

        appendFileHeader()

        appendImports()

        appendClassHeader()

        indented {
            appendAdditionalClassContent()

            appendTests()

            appendHelperMethods()
        }

        +"}"
    }

    context(SmartStringBuilder)
    private fun TestsSuiteInstanceDescriptor.appendGeneratedWarning() {
        +"// This file was generated by KMP Testing Framework. Do not edit it manually."
        +""
    }

    context(SmartStringBuilder)
    private fun TestsSuiteInstanceDescriptor.appendImports() {
        val imports = getDefaultImports(this) + this.configuration.testClass.additionalImports

        imports.sorted().forEach {
            +"import $it"
        }

        if (imports.isNotEmpty()) {
            +""
        }
    }

    context(SmartStringBuilder)
    private fun TestsSuiteInstanceDescriptor.appendAdditionalClassContent() {
        val additionalClassContent = configuration.testClass.additionalClassContent

        if (additionalClassContent.isNotBlank()) {
            +additionalClassContent.trimIndent()
            +""
        }
    }

    context(SmartStringBuilder)
    private fun TestsSuiteInstanceDescriptor.appendTests() {
        contracts.tests.forEach {
            it.appendTest()
        }
    }

    context(SmartStringBuilder)
    private fun ContractDescriptor.appendTest() {
        when (this) {
            is ContractDescriptor.Simple -> appendTest()
            is ContractDescriptor.Parametrized -> appendTest()
        }
    }

    protected val TestsSuiteInstanceDescriptor.name: String
        get() = if (suiteHasMultipleDrivers) {
            configuration.name + contracts.suiteName + "_" + driver.partiallyQualifiedName
        } else {
            configuration.name + contracts.suiteName
        }

    protected abstract val TestsSuiteInstanceDescriptor.generatedFileName: String

    protected abstract fun getDefaultImports(descriptor: TestsSuiteInstanceDescriptor): List<String>

    context(SmartStringBuilder, TestsSuiteInstanceDescriptor)
    protected open fun appendFileHeader() {
    }

    context(SmartStringBuilder)
    protected abstract fun TestsSuiteInstanceDescriptor.appendClassHeader()

    context(SmartStringBuilder)
    protected abstract fun TestsSuiteInstanceDescriptor.appendHelperMethods()

    context(SmartStringBuilder)
    protected abstract fun ContractDescriptor.Simple.appendTest()

    context(SmartStringBuilder)
    protected abstract fun ContractDescriptor.Parametrized.appendTest()
}
